---
title: "R5 Intro to Simmer 1"
subtitle: "14:540:384: Simulation Models in IE (Spring 2025)"
author:
  - name: Daniel Moore
    email: daniel.l.moore@rutgers.edu
    affiliation: 
      - name: Rutgers University
        city: Piscataway
        state: NJ
   
date: 2025-02-19
image: "../assets/simmer-plot.png"
date-format: iso

format:
  html:
    number-sections: true
    toc: true
    toc-depth: 3
    toc-expand: 2
    number-depth: 3
    output-file: R5_nb
    df-print: kable
    
---

# Questions {.unnumbered .unlisted}

# Review

1. Shown why we need simulations and a few practical examples
2. Discussed where distributions come from, how to get them and how to use them
3. Shown how to manipulate data and create visualizations
4. Demonstrated two coding patterns for simulations


# Learning Objectives

1.  Problem analysis
2.  Set up a simple simulation with `simmer`
3.  Run the simulation and extract results

# Problem

Revisit the Wholefoods Return queue

- customers arrive at a rate $\lambda = 3/min$
- single server with exponential service time with $\mu = 1/2min$
- run this simulation for 4 hours

# Implementation

- [simmer](https://r-simmer.org): a process-oriented and trajectory-based Discrete-Event Simulation (DES) package for R
- Allows us to define the essentials of our system
- It handles the simulation part as well as extracting metrics and nice visualizations

## Loading Packages

```{r, load-packages}
#| output: false
#| warning: false
#| echo: true

# usual suspects
library(tidyverse)
library(knitr)
library(fitdistrplus)

# new kid on the block
library(simmer)
library(simmer.plot)
library(simmer.bricks)
```

## Defining Model

```{r, problem-parameters}
#| output: false
#| echo: true

# all given in minutes
lambda <- 1/3
mu <- 1/2
t_f <- 4*60

RV_arr <- function(n=1) {
  rexp(n, rate = lambda)
}

RV_service <- function(n=1) {
  rexp(n, rate = mu)
}
```

## Simmer Components

- **Environment**: The simulation environment, which contains the resources and processes

- **Trajectories**: The paths that entities take through the simulation, which define the sequence of events that occur

- **Resources**: The resources that are used in the simulation, such as servers, buses, and waiting areas

Let's break the problem down into components

### Customer Trajectory

```{r, customer-trajectory}
#| echo: true
#| output: false

cust_traj <- trajectory() |>
  seize("clerk", 1) |>
  timeout(function() RV_service(1)) |>
  release("clerk", 1)
```

- Very basic trajectory. Customer shows up, gets in line (if necessary), makes a return, and leaves as shown in @plot-customer-trajectory

```{r, customer-trajectory-plot}
#| eval: false
#| echo: true
#| output: true
#| fig-label: plot-customer-trajectory
#| fig-cap: "Basic Customer trajectory"

plot(cust_traj)
```

- some bug I'll investigate and demonstrate next time how to get the plot to appear correctly.

### More complex trajectory

More complex plotted trajectory from the [docs](https://r-simmer.org/extensions/plot/articles/plot.trajectory.html)


### Instantiating the Simulation Environment

```{r, sim-environment}
#| echo: true
#| output: false

return_line <- simmer() |>
  add_resource("clerk", 1) |>
  add_generator("customer", cust_traj, function() RV_arr(1))
```

## Running the Simulation

```{r, run-simulation}
return_line |> run(t_f)
```

## Getting Results

`get_mon_resources`: gets information about the "server" usage
`get_mon_arrivals`: gets information about the "customers"

### Resource Visualization

```{r, get-results}
#| echo: true
#| output: false

resources <- get_mon_resources(return_line)

kable(head(resources))
```

- averages over time:

```{r, plot-system-smooth}
#| echo: true
#| output: true
#| fig-label: resource-smooth
#| fig-cap: "System usage over time"
plot(resources, metric = "usage")
```

- instantaneous usage:

```{r, plot-system-step}
#| echo: true
#| output: true
#| fig-label: resource-step
#| fig-cap: "System usage over time"
plot(resources, metric = "usage", steps=TRUE)
```

- utiliazation of the resources. Not super interesting here due to only one resource

```{r, plot-utilization}
#| echo: true
#| output: true
#| fig-label: resource-utilization
#| fig-cap: "System utilization over time"

plot(resources, metric = "utilization")
```


- looking at just the queue 

```{r, plot-queue}
#| echo: true
#| output: true
#| fig-label: resource-queue-only
#| fig-cap: "Queue usage over time"
plot(resources, metric = "usage", items="queue", steps=TRUE)
```

```{r, plot-server}
#| echo: true
#| output: true
#| fig-label: resource-server-only
plot(resources, metric = "usage", items="server", steps=TRUE)
```

### Customer Visualization

```{r, arrival-metrics}
#| echo: true

arrivals <- get_mon_arrivals(return_line)

kable(head(arrivals))
```

```{r, plot-activity-time}
#| echo: true
#| output: true
#| fig-label: activity-time
#| fig-cap: "Activity time of customers"

plot(arrivals, metric = "activity_time")
```

```{r, plot-wait-time}
#| echo: true
#| output: true
#| fig-label: wait-time
#| fig-cap: "Wait time of customers"

plot(arrivals, metric = "waiting_time")
```

```{r, plot-flow-time}
#| echo: true
#| output: true
#| fig-label: flow-time
#| fig-cap: "Flow time of customers"

plot(arrivals, metric = "flow_time")
```


# Conclusion

- Simmer is a powerful tool for building and simulating discrete event systems
- Once we can define the components and dynamics we can build a simulation
- We can visualize the model we've built to make sure it matches our expectations
- All the details are handled for us

# Next Steps

- Working with our own distributions
- More complex systems such as:
- different paths
- different servers
- different customers

