[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Simulations in IE Recitations",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nReading Time\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nR0: Introductions\n\n\n2 min\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nR1: Wind Turbine Repair Process\n\n\n18 min\n\n\n\n\n\n\n\nJan 29, 2025\n\n\nR2: Airport Baggage Handling System\n\n\n9 min\n\n\n\n\n\n\n\nFeb 4, 2025\n\n\nR3 Waiting in Line\n\n\n15 min\n\n\n\n\n\n\n\nFeb 12, 2025\n\n\nR4 Azimuth Check\n\n\n3 min\n\n\n\n\n\n\n\nFeb 19, 2025\n\n\nR5 Intro to Simmer 1\n\n\n3 min\n\n\n\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html",
    "href": "recitations/R3_nb.html",
    "title": "R3 Waiting in Line",
    "section": "",
    "text": "Notice this was excluded from the Table of Contents and is not numbered.",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#front-matter",
    "href": "recitations/R3_nb.html#front-matter",
    "title": "R3 Waiting in Line",
    "section": "1.1 Front Matter",
    "text": "1.1 Front Matter\n---\ntitle: \"R3 Waiting in Line\"\nsubtitle: \"14:540:384: Simulation Models in IE (Spring 2025)\"\nauthor:\n  - name: Daniel Moore\n    email: daniel.l.moore@rutgers.edu\n    affiliation: \n      - name: Rutgers University\n        city: Piscataway\n        state: NJ\n        url: https://sites.rutgers.edu/ropes-lab/\n   \ndate: 2025-02-04\nimage: \"../assets/queue_plot.jpeg\"\ndate-format: iso\n\nformat:\n  pdf:\n    number-sections: true\n    toc: true\n    toc-depth: 3\n    number-depth: 3\n    output-file: R3_pdf\n    df-print: kable\n\nabstract: This document shows some basics about how to leverage Quarto to make your life easier and how to create some neat animations.\n---",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#cell-options",
    "href": "recitations/R3_nb.html#cell-options",
    "title": "R3 Waiting in Line",
    "section": "1.2 Cell Options",
    "text": "1.2 Cell Options\n#| eval: true       # whether to execute code when you render the doc\n#| echo: false      # decide if code is shown in the document or hidden\n#| output: false    # should the output of the chunk be displayed\n#| warning: false   # do you want warnings to be shown in the document\n#| error: false     # do you want error messages to apepar in the doc?\n#| include: false   # Catch all for preventing any output",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#formulas-and-references",
    "href": "recitations/R3_nb.html#formulas-and-references",
    "title": "R3 Waiting in Line",
    "section": "1.3 Formulas and references",
    "text": "1.3 Formulas and references\n\ncreate a cross referencable item with #fig-your-reference-name. Use the appropriate reserved prefix such as: fig, tbl, lst, tip, nte, wrn, imp, cau, thm, lem, cor, prp, cnj, def, exm, exr, sol, rem, eq, sec.\nlink words in your reference with -. Do not using blank space, , or underscores _.\nReference your item where you want with @fig-your-reference-name.\nSee the Quarto References Guide for how to get different formats of your reference such as: “Figure 1”, “Fig 1”, “1” etc.\n\nThe probability density function (pdf) of the exponential distribution is\ngiven below in @eq-exponential-distribution.\n\n$$\np(t) = \\lambda e^{-\\lambda t}\n$$ {#eq-exponential-distribution}\nThe probability density function (pdf) of the exponential distribution is given below in Equation 1.\n\\[\np(t) = \\lambda e^{-\\lambda t}\n\\tag{1}\\]",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#problem-definition",
    "href": "recitations/R3_nb.html#problem-definition",
    "title": "R3 Waiting in Line",
    "section": "2.1 Problem Definition",
    "text": "2.1 Problem Definition\nFrom 4:00 PM to 7:00 PM, customers arrive at Whole Foods to make Amazon returns following a Poisson process with a rate of \\(\\lambda = \\frac{1\\ customer}{3\\ min}\\). A single clerk services the returns at a rate of \\(\\mu = \\frac{1\\ customer}{2\\ min}\\).\nWhat can we say about the:\n\nExpected wait time?\nExpected total time in the system?\nWhat is the probability of seeing more than 5 people in line?\nServer Utilization Rate?",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#coding-the-simulation",
    "href": "recitations/R3_nb.html#coding-the-simulation",
    "title": "R3 Waiting in Line",
    "section": "2.2 Coding the simulation",
    "text": "2.2 Coding the simulation\n\nFor previous examples, we stepped through time and sampled the random variables, keeping track of the results\nFor this example, we will sample all the random variables and perform some logic to determine the results\nThis method is more computationally efficient because loops can slow down R and Python\nOn the one hand, sampling the random variables this way is more convincing because the memoryless property of the exponential distribution can be a hard concept to grasp and we are kind of pushing that issue out of the way\nOn the other hand, this method requires a little more reasoning about what is happening in the system after the random variables are sampled\n\n\n2.2.1 Packages\n\nlibrary(tidyverse)\nlibrary(knitr)\n\n# setting a random seed for reproducibility\nset.seed(1766)\n\n\n\n2.2.2 Parameters\n\nlambda &lt;- 1/3\narrive &lt;- function(n=1) {\n  rexp(n, rate = lambda )\n}\n\nmu &lt;- 1/2\nservice &lt;- function(n=1) {\n  rexp(n, rate = mu)\n}\n\nt_f &lt;- 3 * 60\n\n# double the number of samples to make sure we will have enough to exceed t_f\nsamples &lt;- round(2 * t_f * lambda)\n\n\n\n2.2.3 Generating Arrival and Service Times\n\ndata &lt;- tibble(\n  interarrival_time = arrive(samples),\n  service_time = service(samples)\n)\n\ndata &lt;- data |&gt; mutate(\n  arrival_time = cumsum(interarrival_time)\n)\n\ndata &lt;- data |&gt; filter(arrival_time &lt;= t_f)\n\ndata &lt;- data |&gt; mutate(\n  service_start_time = 0,\n  departure_time = 0)\n\n\n\n2.2.4 Running the Simulation\n\nt_0 &lt;- 0\nnext_available_time &lt;- t_0\n\nfor (i in 1:nrow(data)) {\n  # Service starts when the server is available\n  data$service_start_time[i] &lt;- max(data$arrival_time[i], next_available_time)\n  \n  # Compute departure time\n  data$departure_time[i] &lt;- data$service_start_time[i] + data$service_time[i]\n  \n  # Update when the server wœill next be available\n  next_available_time &lt;- data$departure_time[i]\n}\n\n\n\n2.2.5 Calculating Performance Measures\n\ndata &lt;- data |&gt; mutate(\n  wait_time = service_start_time - arrival_time,\n  total_time = departure_time - arrival_time\n)\n\ndata &lt;- data |&gt; mutate(\n  number_serviced_by_arrival = 0,\n  L = 0, # number in system, waiting + being serviced. Starting at 0\n  L_q = 0 # number in queue\n)\n\nfor (i in 2:nrow(data)) {\n  this_arrival &lt;- data$arrival_time[i]\n  data$number_serviced_by_arrival[i] &lt;- sum(data$departure_time[1:i-1] &lt; this_arrival)\n}\n\nfor (i in 1:nrow(data)) {\n  data$L[i] &lt;- i - data$number_serviced_by_arrival[i]\n  data$L_q[i] &lt;- max(0, data$L[i] - 1)\n}\n\nhead(data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ninterarrival_time\nservice_time\narrival_time\nservice_start_time\ndeparture_time\nwait_time\ntotal_time\nnumber_serviced_by_arrival\nL\nL_q\n\n\n\n\n0.6624587\n5.2966049\n0.6624587\n0.6624587\n5.959064\n0.0000000\n5.2966049\n0\n1\n0\n\n\n9.3129468\n2.5289920\n9.9754055\n9.9754055\n12.504397\n0.0000000\n2.5289920\n1\n1\n0\n\n\n0.3265047\n2.9688180\n10.3019102\n12.5043975\n15.473216\n2.2024873\n5.1713053\n1\n2\n1\n\n\n0.2567624\n2.1481199\n10.5586726\n15.4732155\n17.621335\n4.9145429\n7.0626628\n1\n3\n2\n\n\n0.5007908\n1.0292805\n11.0594634\n17.6213354\n18.650616\n6.5618719\n7.5911524\n1\n4\n3\n\n\n7.1882326\n0.4291179\n18.2476961\n18.6506159\n19.079734\n0.4029198\n0.8320377\n4\n2\n1\n\n\n\n\n\n\nNote that this table will look bad in the PDF. We’ll explicitly use kable() to make it look better. Look at Table 1 to see compare the outputs.\n\nkable(head(data), digits=2, col.names =\n  c(\"Interarrival Time\", \"Arrival Time\", \"Service Time\", \"Service Start Time\", \"Departure Time\", \"Wait Time\", \"Total Time\", \"Serviced by Arrival\", \"L\", \"L_q\"))\n\n\n\nTable 1: Data Formatted with Kable\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInterarrival Time\nArrival Time\nService Time\nService Start Time\nDeparture Time\nWait Time\nTotal Time\nServiced by Arrival\nL\nL_q\n\n\n\n\n0.66\n5.30\n0.66\n0.66\n5.96\n0.00\n5.30\n0\n1\n0\n\n\n9.31\n2.53\n9.98\n9.98\n12.50\n0.00\n2.53\n1\n1\n0\n\n\n0.33\n2.97\n10.30\n12.50\n15.47\n2.20\n5.17\n1\n2\n1\n\n\n0.26\n2.15\n10.56\n15.47\n17.62\n4.91\n7.06\n1\n3\n2\n\n\n0.50\n1.03\n11.06\n17.62\n18.65\n6.56\n7.59\n1\n4\n3\n\n\n7.19\n0.43\n18.25\n18.65\n19.08\n0.40\n0.83\n4\n2\n1\n\n\n\n\n\n\n\n\nWe could also break this table up into a few different groups of columns so that it fits on the page nicer. This is good enough for us for now.",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#visualizing-the-results",
    "href": "recitations/R3_nb.html#visualizing-the-results",
    "title": "R3 Waiting in Line",
    "section": "2.3 Visualizing the Results",
    "text": "2.3 Visualizing the Results\n\n2.3.1 Queue Length Histogram\nFigure 1 shows the distribution of queue lengths.\n\ndata |&gt; ggplot(aes(x=L)) +\n  geom_histogram(fill=\"cornflowerblue\", color=\"black\") +\n  labs(\n    title = \"Queue Length Histogram\",\n    x = \"Number of Customers in Queue\",\n    y = \"Count\"\n  )\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nFigure 1: Histogram of Queue Lengths\n\n\n\n\n\n\n\n2.3.2 Waiting Time Histogram\nFigure 2 shows the distribution of waiting times.\n\ndata |&gt; ggplot(aes(x=wait_time)) +\n  geom_histogram(fill=\"cornflowerblue\", color=\"black\") +\n  labs(\n    title = \"Waiting Time Histogram\",\n    x = \"Waiting Time (min)\",\n    y = \"Count\"\n  )\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nFigure 2: Histogram of Waiting Times\n\n\n\n\n\n\n\n2.3.3 Waiting Time Density\nIf we want to view any of these as a probability density we could use stat_density or geom_density. There are a whole host of different plots that you should browse to see what could be good at telling the story you are trying to convey.\n\ndata |&gt; ggplot(aes(x = wait_time)) +\n  geom_density() +\n  labs(\n    x = \"Time in the System (min)\",\n    y = \"Probability Density\"\n  )\n\n\n\n\n\n\n\nFigure 3: System Waiting Time Density Plot\n\n\n\n\n\n\n\n2.3.4 Queue Length Over Time\nFigure 5 shows the queue length over time. However, this isn’t really the full story. What we want to see is how the system changes at each arrival and departure. To do this, we will need to create a new data frame that has an entry for each arrival and departure. Additionally, we’ll want the numbers indicated to be horizontal lines with discontinuities showing when the number changes. Also, this is not exactly the bounds of our simulation because we cutoff our arrivals at \\(t_f\\), but we have departures after that time. So we should only be plotting up to \\(t_f\\).\n\ndata |&gt; ggplot(aes(x=arrival_time, y=L_q)) +\n  geom_line(color=\"cornflowerblue\") +\n  labs(\n    title = \"Queue Length Over Time\",\n    x = \"Time (min)\",\n    y = \"Number of Customers in Queue\"\n  )\n\n\n\n\n\n\n\nFigure 4: Queue Length Over Time\n\n\n\n\n\nThe way these lines are connected give an indication that the queue length is in between two integers at most times. Line plots can be misleading in this way. We need a step plot. Also, we are essentially only sampling the system at a time that somebody arrives. This is why we are seeing big jumps. We should only be seeing the line move up or down one at a time.\n\nEvent Log\nBasically, we need to unpack the simulation data so that it is event-centric rather than customer-centric.\n\n# all events are either arrivals or departures\n# create a dataframe which tracks all events\n# combines arrival and departure times into single vector, event time\n# for arrivals, event is +1\n# for departures, event is -1\n\nevents &lt;- data |&gt;\n  # bringing the data I want to work with\n  select(arrival_time, departure_time) |&gt; \n  \n  # turning the data from wide to long\n  pivot_longer(\n    cols = everything(),\n    names_to = \"event_type\",\n    values_to = \"event_time\") |&gt; \n  \n  # assigning -1 if departure and 1 if arrival\n  mutate(\n    event = ifelse(event_type == \"arrival_time\", 1, -1)) |&gt;\n  \n  # adding an initial condition of time=0 and 0 customers\n  bind_rows(tibble(event_time = 0, event = 0)) |&gt;\n  \n  # removing the event type column\n  select(-event_type) |&gt;\n  \n  # sorting the data by event time\n  arrange(event_time)\n\n# cumulative sum of events\nevents &lt;- events |&gt; mutate(\n  L = cumsum(event),\n  # pmax is vectorized function that looks at each element rather than the entire thing\n  L_q = pmax(0, L - 1)  \n)\n\nhead(events)\n\n\n\n\n\nevent_time\nevent\nL\nL_q\n\n\n\n\n0.0000000\n0\n0\n0\n\n\n0.6624587\n1\n1\n0\n\n\n5.9590636\n-1\n0\n0\n\n\n9.9754055\n1\n1\n0\n\n\n10.3019102\n1\n2\n1\n\n\n10.5586726\n1\n3\n2\n\n\n\n\n\n\nWe could plot this by adding each column to the plot one at a time, but this can get messy. Instead we’ll do a pivot_longer so that the data is in a better format for plotting multiple series together.\nHere I’m pivoting from a wide format (have both an L and an L_q column) to a long format which just has the x-value of time and the y-value of L or L_q. This makes plotting much easier.\n\nevents_long &lt;- events |&gt; \n  pivot_longer(\n    cols = c(L, L_q), \n    names_to = \"metric\", \n    values_to = \"value\"\n  )\n\nhead(events_long)\n\n\n\n\n\nevent_time\nevent\nmetric\nvalue\n\n\n\n\n0.0000000\n0\nL\n0\n\n\n0.0000000\n0\nL_q\n0\n\n\n0.6624587\n1\nL\n1\n\n\n0.6624587\n1\nL_q\n0\n\n\n5.9590636\n-1\nL\n0\n\n\n5.9590636\n-1\nL_q\n0\n\n\n\n\n\n\nAt last, Figure 5 shows a complete plot of the number of customers in line and the number in the system at each moment.\n\nevents_long |&gt; ggplot(aes(x = event_time, y = value, color=metric)) +\n  xlim(0, t_f) +\n  geom_step(direction = \"hv\") +\n  labs(\n    title = \"Customer Count Over Time\",\n    x = \"Time (min)\",\n    y = \"Customers\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\nFigure 5: Customer Count Over Time",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#concepts",
    "href": "recitations/R3_nb.html#concepts",
    "title": "R3 Waiting in Line",
    "section": "3.1 Concepts",
    "text": "3.1 Concepts\n\nData in long format: Structure data with one row per observation and a time variable for animations (use pivot_longer() for multiple metrics).\nTime variable for transitions: Use a continuous variable (e.g., event_time) to animate data over time with transition_reveal() or transition_states().\nCompatible geom layers: Use geom_step(), geom_line(), or geom_point() to animate time-series data, ensuring smooth transitions.",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#code",
    "href": "recitations/R3_nb.html#code",
    "title": "R3 Waiting in Line",
    "section": "3.2 Code",
    "text": "3.2 Code\n\nlibrary(gganimate)\nlibrary(gifski)\n\nNote that I have this cell set up to not execute with #| eval: false. I used this exact code to create and save the plot as shown, but I don’t want to re-render and save over it every time.\n\np &lt;- events_long |&gt; \n  ggplot(aes(x = event_time, y = value, color = metric)) +\n  geom_step(size = 1.2) + \n  labs(x = \"Time\", y = \"Customers\", color = \"Metric\") +\n  theme_minimal() +\n  transition_reveal(event_time)\n\n# Animate and save as GIF\nanim &lt;- animate(p, renderer = gifski_renderer(),\n  width = 800, height = 600, duration = 5)\nanim_save(\"returns_animation.gif\", animation = anim)\n\nanim\n\n\n\n\nQueueing Animation",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#formulae",
    "href": "recitations/R3_nb.html#formulae",
    "title": "R3 Waiting in Line",
    "section": "4.1 Formulae",
    "text": "4.1 Formulae\n\\[\nServer\\ Utilization, \\rho = \\frac{\\lambda}{\\mu} = \\frac{1/3}{1/2}\n\\tag{2}\\]\n\\[\nExpected\\ Number\\ in\\ the\\ System,\\ L = \\frac{\\lambda}{\\mu - \\lambda}\n\\tag{3}\\]\n\\[\nExpected\\ Number\\ in\\ the\\ Queue,\\ L_q = \\frac{\\lambda^2}{\\mu(\\mu - \\lambda)}\n\\tag{4}\\]\n\\[\nExpected\\ time\\ in\\ the\\ System,\\ W = \\frac{1}{\\mu - \\lambda}\n\\tag{5}\\]\n\\[\nExpected\\ time\\ in\\ the\\ Queue,\\ W_q = \\frac{\\lambda}{\\mu(\\mu - \\lambda)}\n\\tag{6}\\]\n\\[\nProbability\\ of\\ empty\\ system, P_0 = 1 - \\rho\n\\tag{7}\\]\n\\[\nProbability\\ of\\ n\\ customers\\ in\\ the\\ System,\\ P(n) = (1 - \\rho)\\rho^n\n\\tag{8}\\]",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#calculations",
    "href": "recitations/R3_nb.html#calculations",
    "title": "R3 Waiting in Line",
    "section": "4.2 Calculations",
    "text": "4.2 Calculations\n\n# \nP_n &lt;- function(n, rho) {\n  (1 - rho) * rho^n\n}\n\nperformance_measures &lt;- data.frame(\n  Performance_Measure = c(\"L\", \"L_q\", \"W\", \"W_q\", \"rho\"),\n  Analytical = c(\n    lambda / (mu - lambda),\n    (lambda^2) / (mu * (mu - lambda)),\n    1 / (mu - lambda),\n    lambda / (mu * (mu - lambda)),\n    lambda / mu\n  )\n)",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#think-critically",
    "href": "recitations/R3_nb.html#think-critically",
    "title": "R3 Waiting in Line",
    "section": "5.1 Think Critically!",
    "text": "5.1 Think Critically!\n\nThink for a minute about the way our two data frames are structured. Is all of the information there? What do we need to consider to get it.",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#performance-measure-notes",
    "href": "recitations/R3_nb.html#performance-measure-notes",
    "title": "R3 Waiting in Line",
    "section": "5.2 Performance Measure Notes",
    "text": "5.2 Performance Measure Notes\n\nThe performance measures, \\(L\\) and \\(L_q\\) are supposed to represent the expected number of custoemrs in the system and in the queue\nThe first data is customer centric. All we see is how many people are in line when the customer shows up. \\(W\\) and \\(W_q\\) are obtainable from this.\nThe second is event centric. We see the time that an event happens and the customers at that time.\nThis means essentially we are just sampling at these points. It might be a good representation of the number in the system, but it might not be. Notably, we could definitely have systematic error because this “sampling” isn’t even random, it is always as events",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#what-to-do",
    "href": "recitations/R3_nb.html#what-to-do",
    "title": "R3 Waiting in Line",
    "section": "5.3 What to do?",
    "text": "5.3 What to do?\n\nWe need to take the time-weighted average of the number of people in the system and in line\nThis data is available in the events data frame, but it will take a little more manipulation:\n\n\nevents &lt;- events |&gt; mutate(\n  time_in_state = coalesce(lead(event_time), t_f) - event_time\n)\n\nCoalesce gives us a default value to use. Since we are differencing each row with the one after it, when we get to the last row there’s nothing there. So we need to say the last row’s lead even time is the end of the simulation, t_f.\n\nperformance_measures &lt;- performance_measures |&gt; mutate(\n  Simulation = c(\n    sum(events$L * events$time_in_state) / t_f,\n    sum(events$L_q * events$time_in_state) / t_f,\n    mean(data$total_time),\n    mean(data$wait_time),\n    sum(events$time_in_state[events$L &gt; 0]) / t_f\n  )\n)\n\nNow we can compare the analytical results in Table 2 and the correctly calculated simulation performance measures.\n\nkable(performance_measures, digits = 3)\n\n\n\nTable 2: Simulation and Analytical Comparison\n\n\n\n\n\n\nPerformance_Measure\nAnalytical\nSimulation\n\n\n\n\nL\n2.000\n1.190\n\n\nL_q\n1.333\n0.643\n\n\nW\n6.000\n3.692\n\n\nW_q\n4.000\n1.995\n\n\nrho\n0.667\n0.547\n\n\n\n\n\n\n\n\n\n\n\nTable 3: Calculating P(n)\n\n\nn_in_system_ps &lt;- tibble(n = 0:10) |&gt;\n  mutate(\n    Analytical = P_n(0:10, lambda/mu),\n    Simulation = sapply(0:10, function(k) sum(events$time_in_state[events$L == k]) / t_f)\n  )\n\nkable(n_in_system_ps, digits=3)\n\n\n\n\n# first we need to get the data into long format\n\nn_in_system_ps |&gt;\n  pivot_longer(\n    cols = c(Analytical, Simulation),\n    names_to = \"method\",\n    values_to = \"p\"\n  ) |&gt;\n  ggplot(aes(x = n, y = p, fill = method, group = method)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"n\", y = \"Probability\", title = \"Probabilities by Method\") +\n  theme_minimal()\n\n\n\n\n\n\n\nFigure 6: Corrected P(n) Histogram\n\n\n\n\n\nI’ll leave it to you to compare these results with an incorrect method which would be simply averaging from the sampled data or the events log without accounting for time.",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#potential-complications",
    "href": "recitations/R3_nb.html#potential-complications",
    "title": "R3 Waiting in Line",
    "section": "6.1 Potential Complications?",
    "text": "6.1 Potential Complications?\n\nWhat if there is a limited amount of space and if the line is too long, customers just leave?\nService times follow different distributions?\nMore than one line? More than one server?\nPriority line with different logic? Maybe a commerical customer with 12 packages gets serviced as soon as a server is available?",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R3_nb.html#summary",
    "href": "recitations/R3_nb.html#summary",
    "title": "R3 Waiting in Line",
    "section": "6.2 Summary",
    "text": "6.2 Summary\n\nWe simulated an \\(M/M/1\\) queuing system by sampling arrival and service times\nWe obtained system state measurements by executing logic on the samples\nManipulated the data into an event time series\nCreated and animated geom_step plots using ggplot, gganimate, and gifski\nCompared analytical system metrics to those we obtained from the simulation.\nNoted how we must account for time to get correct performance measures",
    "crumbs": [
      "Tutorials",
      "Rectiation #3"
    ]
  },
  {
    "objectID": "recitations/R1_nb.html",
    "href": "recitations/R1_nb.html",
    "title": "R1: Wind Turbine Repair Process",
    "section": "",
    "text": "Develop a motivating example for IE simulation models\nDemonstrate the type of coding complexity that we will build up to during the course\nGauge students’ level of expertise in probability models and programming",
    "crumbs": [
      "Tutorials",
      "Recitation #1"
    ]
  },
  {
    "objectID": "recitations/R1_nb.html#development-stack",
    "href": "recitations/R1_nb.html#development-stack",
    "title": "R1: Wind Turbine Repair Process",
    "section": "1.1 Development Stack",
    "text": "1.1 Development Stack\n\n\n\\(\\textsf{R}\\): R is a language and environment for statistical computing and graphics. Its predecessor, “S”, was developed by Bell Labs in Murray Hill, NJ.\n\\(\\textsf{RStudio}\\): Used by millions of people weekly, the RStudio integrated development environment (IDE) is a set of tools built to help you be more productive with R and Python.\nQuarto: An open-source scientific and technical publishing system. Analyze. Share. Reproduce. You have a story to tell with data—tell it with Quarto.\nMarkdown. Lightweight language to format plain text.",
    "crumbs": [
      "Tutorials",
      "Recitation #1"
    ]
  },
  {
    "objectID": "recitations/R1_nb.html#hello-world",
    "href": "recitations/R1_nb.html#hello-world",
    "title": "R1: Wind Turbine Repair Process",
    "section": "1.2 Hello, World!",
    "text": "1.2 Hello, World!\n\nStandard test to make sure a programming environment is properly configured\n\n\nprint(\"Hello, World!\")\n\n[1] \"Hello, World!\"\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor \\(\\textsf{R}\\) tutorials, go to top-right corner of \\(\\textsf{RStudio}\\) and look for the “Tutorial” tab. Follow instructions in the pane.",
    "crumbs": [
      "Tutorials",
      "Recitation #1"
    ]
  },
  {
    "objectID": "recitations/R1_nb.html#package-management",
    "href": "recitations/R1_nb.html#package-management",
    "title": "R1: Wind Turbine Repair Process",
    "section": "1.3 Package Management",
    "text": "1.3 Package Management\n\\(\\textsf{R}\\) is a go-to language for many domains because of its mature packages for many kinds of data analysis. These packages are easily accessible via the Comprehensive R Archive Network (CRAN)\nnote: click on the tabs to see additional content\n\nInstall PackagesLoad Packages\n\n\nThis tells CRAN to find your desired package and download a copy to your working environment.\n\nOption 1: Go to Files Pane (lower right) \\(\\rightarrow\\) Packages tab \\(\\rightarrow\\) Install \\(\\rightarrow\\) &lt;search for your package&gt; \\(\\rightarrow\\) follow prompts in console\nOption 2: In the console pane (lower left), type install.packages(\"&lt;pkg_name&gt;\") \\(\\rightarrow\\) follow prompts\n\n\n\nCode\n# installing packages\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggExtra\")\n\n\n\n\nThis tells your current R session to read the [downloaded] packages and then you can use them.\n\nOption 1: File Pane \\(\\rightarrow\\) Packages Tab \\(\\rightarrow\\) scroll or search for your package \\(\\rightarrow\\) click the checkbox\nOption 2: In the console or your working file put: library(&lt;pkg_name&gt;).\n\n\n\nCode\n# loading packages\nlibrary(tidyverse)\nlibrary(ggExtra)",
    "crumbs": [
      "Tutorials",
      "Recitation #1"
    ]
  },
  {
    "objectID": "recitations/R1_nb.html#wind-turbine-breakdown",
    "href": "recitations/R1_nb.html#wind-turbine-breakdown",
    "title": "R1: Wind Turbine Repair Process",
    "section": "2.1 Wind Turbine Breakdown",
    "text": "2.1 Wind Turbine Breakdown\n\nProblemAnalytical SolutionSimulation Plan\n\n\n\n\nAn offshore wind farm operates 300 turbines. The breakdown rate follows an exponential distribution with a rate of one per 2000 hours of operation. How many breakdowns should be anticipated per year?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith this information we can simply take the parameter, \\(\\lambda\\), and multiply it by the hours in a year and the total number of turbines to get the expected number of failures in the year.\n\\[\nX \\sim Exp \\left( \\lambda = \\frac{1}{2,000\\ hrs} \\right)\n\\]\n\\[\nf_X(t | \\lambda) = \\lambda e^{-\\lambda t}\n\\]\n\\[\nN = 300\\ turbines \\frac{365\\ days}{year} \\frac{24\\ hrs}{day} \\frac{1\\ breakdown/turbine}{2,000\\ hrs} = 1,314\\ breakdowns/year\n\\]\n\n\nThis is a silly problem to simulate, but we will do it anyway. We have a few options:\n\nSample \\(X\\) to get breakdown times and see how many we get in one year. Then multiply that by 300\nSample \\(X\\) to get breakdown times for each turbine and add them all together\nDo (1) or (2) for \\(N\\) years and then divide the result by \\(N\\). (\\(N\\) could be less than 1. What does that mean?)\nRecognize Exponential gives failure times, Poisson gives failures in a given time. Use that instead\n\n\n\n\n\nSimulation Parameters\n\n# I've defined certain \"params\" in the header of the document\nlambda &lt;- 1 / params$breakdown_rate # Breakdown rate (failures per hour)\nN &lt;- params$sim_yrs                 # Total simulation time in years\nK &lt;- params$turbines                # Number of turbines\nyr &lt;- 24 * 365                      # number of hours in a year\n\n# define a RV, X, which will sample the exp dist. when we call X()\nX &lt;- function(n=1) {\n  # n gives the number of samples, with the default of 1\n  rexp(n, rate = lambda)\n}\n\n\n\n\n\n\n\nTip\n\n\n\n&lt;- and = are chosen to follow convention. &lt;- assigns a “value” to a variable while = is used in function signatures.\n\n\n\n\nSampling Random Variable\nSample it once:\n\nX()\n\n[1] 790.435\n\n\nSample it several times:\n\nX(5)\n\n[1] 3349.3017  657.3868 1444.3244  344.2959 2476.3891\n\n\nAveraging a few samples\n\nmean(X(15))\n\n[1] 1606.211\n\n\nAveraging a lot of samples\n\nmean(X(15000))\n\n[1] 1995.051\n\n\n\n\nN-Sample Visualization\n\n\nCode\n# set the samples and increment\nn_values = seq(10, 5000, by = 10)\n\n# create a tibble with N, mean, and sd for sampling X() n times\nX_sim &lt;- tibble(\n  n = n_values,\n  Mean = map_dbl(n_values, ~ mean(X(.x))),\n  SD = map_dbl(n_values, ~ sd(X(.x)))\n)\n\n#plot results\nX_sim %&gt;%\n  ggplot(aes(x = n, y = Mean)) +\n  geom_line(color = \"blue\") +\n  geom_ribbon(aes(ymin = Mean - SD, ymax = Mean + SD), fill = \"blue\", alpha = 0.2) +\n  scale_x_log10() +\n  labs(\n    x = \"Sample Size (n)\",\n    y = \"Mean ± SD\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nSimulation Code\n\n# Initialize total breakdown count\nbreakdowns &lt;- 0\n\n# Iterate over each turbine\nfor (k in 1:K) {\n  # simulate for N years\n  for (n in 1:N) {\n    # Reset initial time to 0\n    t &lt;- 0\n    \n    # while t is less than one year\n    while (t &lt;= yr) {\n      # Sample from the exponential distribution (time to next breakdown)\n      t &lt;- t + X()\n      \n      # Increment the breakdown count if within the simulation period\n      if (t &lt;= yr) {\n        breakdowns &lt;- breakdowns + 1\n      }\n    }\n  }\n}\n\n# Calculate the average number of breakdowns per year across all turbines\nbreakdowns &lt;- breakdowns / N\n\nWe should expect 1312.028 breakdowns in a year for the 300-turbine wind farm.\n\n\nCode Flow Chart:\n\n\n\n\n\nflowchart LR\n  A[\"X ~ Exp(λ)\n  breakdowns = 0\n  t = 0\"]\n  B{\"t &lt;= 1 year\"}\n  C[\"t += X()\"]\n  D{\"t &lt;= 1 year\"}\n  E[\"breakdowns++\"]\n  Terminate([Terminate])\n  \n  A --&gt; B\n  B --true--&gt; C\n  C --&gt; D\n  D --true--&gt; E\n  D --false--&gt; B\n  E --&gt; B\n  B --false-----&gt; Terminate\n\n\n\n\n\n\n\n\nSmarter Simulation\n\nExponential gives time between events\nPoisson gives number of events in a given time\n\n\n# Poisson parameter is # events per time period\nlambda_p &lt;- yr * lambda\n\n# we want to sample K*N times, This gives K*N breakdowns (vector)\npoisson_breakdowns &lt;- rpois(N*K, lambda_p)\n\n# sum the vector and divide by N\npoisson_breakdowns &lt;- sum(poisson_breakdowns) / N\n\nWe should expect 1314.072 breakdowns in a year for the 300-turbine wind farm.\n\n\n\n\n\n\nTip\n\n\n\nSearch documentation by going to the lower right pane and clicking the “Help” tab. Then type your term (i.e. rpois) into the search bar.",
    "crumbs": [
      "Tutorials",
      "Recitation #1"
    ]
  },
  {
    "objectID": "recitations/R1_nb.html#wind-turbine-repair",
    "href": "recitations/R1_nb.html#wind-turbine-repair",
    "title": "R1: Wind Turbine Repair Process",
    "section": "2.2 Wind Turbine Repair",
    "text": "2.2 Wind Turbine Repair\nRepairs are assumed to take 96 hours (the average). How much turbine-down time should be expected per year? How many breakdowns should be anticipated per year?\n\nAnalytical Solution\n\nWith a fixed repair time, we can tack 96 hours on to the breakdown rate, 1 break down every2000 hours + 96 hours to repair = 1 breakdown every 2096.\n\n\\[\nN = 300\\ turbines \\frac{365\\ days}{year} \\frac{24\\ hrs}{day} \\frac{1\\ breakdown/turbine}{2,096\\ hrs} = 1,253.8\\ breakdowns/year\n\\]\n\nAccounting for repair time, our number of breakdowns…decreased? Is this sensible?\n\n\\[\nN = 300\\ turbines \\frac{365\\ days}{year} \\frac{24\\ hrs}{day} \\frac{96\\ hrs\\ downtime}{2,096\\ hrs\\ operation} = 120,366.4\\ hrs\\ downtime\n\\]\n\nAre we confident that this math checks out? Let’s simulate it…\n\n\n\nSimulation Modification\n\n# repair time, Y\nY &lt;- params$repair_avg\n\n# Initialize breakdowns and uptime\nbreakdowns &lt;- 0\nuptime &lt;- 0\n\n# Iterate over each turbine\nfor (k in 1:K) {\n  # simulate for N years\n  for (n in 1:N) {\n    # Reset simulation time to 0\n    t &lt;- 0\n    \n    # while t is less than one year\n    while (t &lt;= yr) {\n      \n      # sample breakdown time\n      time_to_breakdown &lt;- X()\n\n      # check if the breakdown time will exceed a year\n      if (t + time_to_breakdown &lt;= yr) {\n        # if not, then we get another breakdown\n        breakdowns &lt;- breakdowns + 1\n        # the simulation time increases by the time to breakdown\n        t &lt;- t + time_to_breakdown\n        # and the uptime increases by the time to breakdown\n        uptime &lt;- uptime + time_to_breakdown\n        \n        # for now, Y is a constant\n        time_to_repair &lt;- Y\n\n        t &lt;- t + time_to_repair\n        \n      } else {\n        # if the breakdown time exceeds one year, then uptime\n        # extends to the end of the year and we don't get a new breakdown\n        uptime &lt;- uptime + (yr - t)\n        t &lt;- t + time_to_breakdown\n      }\n    }\n  }\n}\n\n# Calculate the average number of breakdowns per year across all turbines\nuptime &lt;- uptime / N\nbreakdowns &lt;- breakdowns / N\ndowntime &lt;- 300*yr - uptime\n\n\n\nResults Comparison\n\n\n\n\n\n\n\n\nMetric\nAnalytical\nSimulation\n\n\n\n\n\\(breakdowns/yr\\)\n1253.8\n1250.984\n\n\n\\(total\\ turbine\\ downtime/yr\\)\n120366.4\n119442.9\n\n\n\n\nShortfalls?\n\n\nAssumes every turbine is working at the start of the simulation\nWhat can we say about the probability of downtime exceeding some value?\nIf we want to increase up time, should we focus on expediting repairs or performing preventive maintenance to increase time between failures?\nDo all repairs take the same amount of time?",
    "crumbs": [
      "Tutorials",
      "Recitation #1"
    ]
  },
  {
    "objectID": "recitations/R1_nb.html#lognormally-distributed-repair-time",
    "href": "recitations/R1_nb.html#lognormally-distributed-repair-time",
    "title": "R1: Wind Turbine Repair Process",
    "section": "2.3 LogNormally Distributed Repair Time",
    "text": "2.3 LogNormally Distributed Repair Time\n\nMost repairs take about the same amount of time, but some take a long time (think specialty overseas parts etc).\n\n\\[\nY \\sim LogNormal(\\mu, \\sigma^2)\n\\] \\[\nf_Y(t | \\mu, \\sigma) = \\frac{1}{\\sqrt{2\\pi \\sigma t}} \\exp \\left( \\frac{-(log(t)-\\mu)^2}{2\\sigma^2} \\right)\n\\]\n\nLogNormal Distribution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese are the same distribution with the left x-axis on a log scale. The lower end of ranges look basically like a Normal distribution for both plots, but the right plot shows that the higher values of \\(t\\) are more likely than if it were just a Normal distribution. The pdf looks like it is being stretched.\n\n\nCreating LogNormal Distribution\n\nmu &lt;- params$repair_avg\nsigma &lt;- params$repair_std\nmu_log &lt;- log( mu^2 / ( mu^2 + sigma^2)^(1/2) )\nsigma_log &lt;- (log(1 + (sigma^2/mu^2)))^(1/2)\n\nY &lt;- function(n=1){\n  rlnorm(n, mu_log, sigma_log)\n}\n\n\n\nVerifying LogNormal Distribution\n\nrepair_times &lt;- Y(500)\n\nmu_calc &lt;- mean(repair_times)\nsigma_calc &lt;- sd(repair_times)\n\n\nSample mean: 95.4088067\nSample standard deviation: 21.5436667\n\n\n\n\n\n\n\nTip\n\n\n\nYou often can’t validate your entire simulation. However, you can and should verify the components as much as possible\n\n\n\n\nAnalytical Solution\n\nNeed to determine how many times \\(X + Y\\) divide into one year\nAdding two distributions is not straightforward. How do you add a pair of 6-sided die?\nThis is really a convolution, denoted as \\(X \\ast Y\\). It can be found as:\n\n\\[(f_X * f_Y)(t) = \\int_{-\\infty}^{\\infty} f_X(\\tau) f_Y(t - \\tau) \\, d\\tau\\]\n\nSometimes, this can be achieved easier through Laplace Transforms\nUnfortunately, a closed-form analytical solution is not always possible\n\n\n\nSimulation Adjustment\n\n# Initialize breakdowns and uptime\nbreakdowns &lt;- 0\nuptime &lt;- 0\n\n# Iterate over each turbine\nfor (k in 1:K) {\n  # simulate for N years\n  for (n in 1:N) {\n    # Reset simulation time to 0\n    t &lt;- 0\n    \n    # while t is less than one year\n    while (t &lt;= yr) {\n      \n      # sample breakdown time\n      time_to_breakdown &lt;- X()\n\n      # check if the breakdown time will exceed a year\n      if (t + time_to_breakdown &lt;= yr) {\n        # if not, then we get another breakdown\n        breakdowns &lt;- breakdowns + 1\n        # the simulation time increases by the time to breakdown\n        t &lt;- t + time_to_breakdown\n        # and the uptime increases by the time to breakdown\n        uptime &lt;- uptime + time_to_breakdown\n        \n        # now we will sample Y\n        time_to_repair &lt;- Y()\n\n        t &lt;- t + time_to_repair\n        \n      } else {\n        # if the breakdown time exceeds one year, then uptime\n        # extends to the end of the year and we don't get a new breakdown\n        uptime &lt;- uptime + (yr - t)\n        t &lt;- t + time_to_breakdown\n      }\n    }\n  }\n}\n\n# Calculate the average number of breakdowns per year across all turbines\nuptime &lt;- uptime / N\nbreakdowns &lt;- breakdowns / N\ndowntime &lt;- 300*yr - uptime\n\n\n\nResults Comparison, LogNormal Dist.\n\n\n\n\n\n\n\n\nMetric\nAnalytical\nSimulation\n\n\n\n\n\\(breakdowns/yr\\)\n1253.8\n1253.084\n\n\n\\(total\\ turbine\\ downtime/yr\\)\n120366.4\n119591.6",
    "crumbs": [
      "Tutorials",
      "Recitation #1"
    ]
  },
  {
    "objectID": "recitations/R1_nb.html#collecting-more-simulation-data",
    "href": "recitations/R1_nb.html#collecting-more-simulation-data",
    "title": "R1: Wind Turbine Repair Process",
    "section": "2.4 Collecting more Simulation Data",
    "text": "2.4 Collecting more Simulation Data\nWe want to ask questions about the distribution of failures and repairs. We need to collect more data from the simulation and store it in an easy format for manipuation.\n\nTidy Data & Tidyverse\n\n# Create an empty table which we will populate during simulation\nresults &lt;- tibble(\n  turbine_id = integer(),\n  year = integer(),\n  breakdowns = integer(),\n  uptime = numeric()\n)\n\n\n\n\n\n\n\nTip\n\n\n\ntidyverse is the one-stop-shop for (nearly) everything needed for working with data and creating great visualizations. It includes several different packages which all adhere to the “tidy” way of doing things. We’ll see more of this in the future.\n\n\n\n\nFinal Simulation\n\n# Iterate over each turbine\nfor (k in 1:K) {\n  # simulate for N years\n  for (n in 1:N) {\n    # move these to inner loop to record results of each iteration\n    breakdowns &lt;- 0\n    uptime &lt;- 0\n    t &lt;- 0\n    \n    # while t is less than one year\n    while (t &lt;= yr) {\n      \n      # sample breakdown time\n      time_to_breakdown &lt;- X()\n\n      # check if the breakdown time will exceed a year\n      if (t + time_to_breakdown &lt;= yr) {\n        # if not, then we get another breakdown\n        breakdowns &lt;- breakdowns + 1\n        # the simulation time increases by the time to breakdown\n        t &lt;- t + time_to_breakdown\n        # and the uptime increases by the time to breakdown\n        uptime &lt;- uptime + time_to_breakdown\n        \n        # now sampling Y\n        time_to_repair &lt;- Y()\n\n        t &lt;- t + time_to_repair\n        \n      } else {\n        # if the breakdown time exceeds one year, then uptime\n        # extends to the end of the year and we don't get a new breakdown\n        uptime &lt;- uptime + (yr - t)\n        t &lt;- t + time_to_breakdown\n      }\n    }\n    \n    # write the data to the rows of our tibble\n    results &lt;- results |&gt;\n      add_row(\n        turbine_id = k,\n        year = n,\n        breakdowns = breakdowns,\n        uptime = uptime\n      )\n  }\n}\n\n# calculating a column for downtime \nresults &lt;- results |&gt;\n  mutate(downtime = yr - uptime)\n\n\n\nSimulation Visualizations\n\nBreakdownsDowntimeDowntime vs. Breakdowns\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResults Cumulative Distributions\n\nTotal BreakdownsAnnual Downtime",
    "crumbs": [
      "Tutorials",
      "Recitation #1"
    ]
  },
  {
    "objectID": "recitations/R1_reveal.html#development-stack",
    "href": "recitations/R1_reveal.html#development-stack",
    "title": "R1: Wind Turbine Repair Process",
    "section": "1.1 Development Stack",
    "text": "1.1 Development Stack\n\n\n\\(\\textsf{R}\\): R is a language and environment for statistical computing and graphics. Its predecessor, “S”, was developed by Bell Labs in Murray Hill, NJ.\n\\(\\textsf{RStudio}\\): Used by millions of people weekly, the RStudio integrated development environment (IDE) is a set of tools built to help you be more productive with R and Python.\nQuarto: An open-source scientific and technical publishing system. Analyze. Share. Reproduce. You have a story to tell with data—tell it with Quarto.\nMarkdown. Lightweight language to format plain text."
  },
  {
    "objectID": "recitations/R1_reveal.html#hello-world",
    "href": "recitations/R1_reveal.html#hello-world",
    "title": "R1: Wind Turbine Repair Process",
    "section": "1.2 Hello, World!",
    "text": "1.2 Hello, World!\n\nStandard test to make sure a programming environment is properly configured\n\n\nprint(\"Hello, World!\")\n\n[1] \"Hello, World!\"\n\n\n\n\n\n\n\n\nTip\n\n\nFor \\(\\textsf{R}\\) tutorials, go to top-right corner of \\(\\textsf{RStudio}\\) and look for the “Tutorial” tab. Follow instructions in the pane."
  },
  {
    "objectID": "recitations/R1_reveal.html#package-management",
    "href": "recitations/R1_reveal.html#package-management",
    "title": "R1: Wind Turbine Repair Process",
    "section": "1.3 Package Management",
    "text": "1.3 Package Management\n\\(\\textsf{R}\\) is a go-to language for many domains because of its mature packages for many kinds of data analysis. These packages are easily accessible via the Comprehensive R Archive Network (CRAN)\nnote: click on the tabs to see additional content\n\nInstall PackagesLoad Packages\n\n\nThis tells CRAN to find your desired package and download a copy to your working environment.\n\nOption 1: Go to Files Pane (lower right) \\(\\rightarrow\\) Packages tab \\(\\rightarrow\\) Install \\(\\rightarrow\\) &lt;search for your package&gt; \\(\\rightarrow\\) follow prompts in console\nOption 2: In the console pane (lower left), type install.packages(\"&lt;pkg_name&gt;\") \\(\\rightarrow\\) follow prompts\n\n\n\nCode\n# installing packages\ninstall.packages(\"tidyverse\")\ninstall.packages(\"ggExtra\")\n\n\n\n\nThis tells your current R session to read the [downloaded] packages and then you can use them.\n\nOption 1: File Pane \\(\\rightarrow\\) Packages Tab \\(\\rightarrow\\) scroll or search for your package \\(\\rightarrow\\) click the checkbox\nOption 2: In the console or your working file put: library(&lt;pkg_name&gt;).\n\n\n\nCode\n# loading packages\nlibrary(tidyverse)\nlibrary(ggExtra)"
  },
  {
    "objectID": "recitations/R1_reveal.html#wind-turbine-breakdown",
    "href": "recitations/R1_reveal.html#wind-turbine-breakdown",
    "title": "R1: Wind Turbine Repair Process",
    "section": "2.1 Wind Turbine Breakdown",
    "text": "2.1 Wind Turbine Breakdown\n\nProblemAnalytical SolutionSimulation Plan\n\n\n\n\nAn offshore wind farm operates 300 turbines. The breakdown rate follows an exponential distribution with a rate of one per 2000 hours of operation. How many breakdowns should be anticipated per year?\n\n\n\n\n\n\n\n\n\n\n\n\n\nWith this information we can simply take the parameter, \\(\\lambda\\), and multiply it by the hours in a year and the total number of turbines to get the expected number of failures in the year.\n\\[\nX \\sim Exp \\left( \\lambda = \\frac{1}{2,000\\ hrs} \\right)\n\\]\n\\[\nf_X(t | \\lambda) = \\lambda e^{-\\lambda t}\n\\]\n\\[\nN = 300\\ turbines \\frac{365\\ days}{year} \\frac{24\\ hrs}{day} \\frac{1\\ breakdown/turbine}{2,000\\ hrs} = 1,314\\ breakdowns/year\n\\]\n\n\nThis is a silly problem to simulate, but we will do it anyway. We have a few options:\n\nSample \\(X\\) to get breakdown times and see how many we get in one year. Then multiply that by 300\nSample \\(X\\) to get breakdown times for each turbine and add them all together\nDo (1) or (2) for \\(N\\) years and then divide the result by \\(N\\). (\\(N\\) could be less than 1. What does that mean?)\nRecognize Exponential gives failure times, Poisson gives failures in a given time. Use that instead"
  },
  {
    "objectID": "recitations/R1_reveal.html#wind-turbine-repair",
    "href": "recitations/R1_reveal.html#wind-turbine-repair",
    "title": "R1: Wind Turbine Repair Process",
    "section": "2.2 Wind Turbine Repair",
    "text": "2.2 Wind Turbine Repair\nRepairs are assumed to take 96 hours (the average). How much turbine-down time should be expected per year? How many breakdowns should be anticipated per year?"
  },
  {
    "objectID": "recitations/R1_reveal.html#lognormally-distributed-repair-time",
    "href": "recitations/R1_reveal.html#lognormally-distributed-repair-time",
    "title": "R1: Wind Turbine Repair Process",
    "section": "2.3 LogNormally Distributed Repair Time",
    "text": "2.3 LogNormally Distributed Repair Time\n\nMost repairs take about the same amount of time, but some take a long time (think specialty overseas parts etc).\n\n\\[\nY \\sim LogNormal(\\mu, \\sigma^2)\n\\] \\[\nf_Y(t | \\mu, \\sigma) = \\frac{1}{\\sqrt{2\\pi \\sigma t}} \\exp \\left( \\frac{-(log(t)-\\mu)^2}{2\\sigma^2} \\right)\n\\]"
  },
  {
    "objectID": "recitations/R1_reveal.html#collecting-more-simulation-data",
    "href": "recitations/R1_reveal.html#collecting-more-simulation-data",
    "title": "R1: Wind Turbine Repair Process",
    "section": "2.4 Collecting more Simulation Data",
    "text": "2.4 Collecting more Simulation Data\nWe want to ask questions about the distribution of failures and repairs. We need to collect more data from the simulation and store it in an easy format for manipuation."
  },
  {
    "objectID": "recitations/R5_nb.html#loading-packages",
    "href": "recitations/R5_nb.html#loading-packages",
    "title": "R5 Intro to Simmer 1",
    "section": "4.1 Loading Packages",
    "text": "4.1 Loading Packages\n\n# usual suspects\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(fitdistrplus)\n\n# new kid on the block\nlibrary(simmer)\nlibrary(simmer.plot)\nlibrary(simmer.bricks)"
  },
  {
    "objectID": "recitations/R5_nb.html#defining-model",
    "href": "recitations/R5_nb.html#defining-model",
    "title": "R5 Intro to Simmer 1",
    "section": "4.2 Defining Model",
    "text": "4.2 Defining Model\n\n# all given in minutes\nlambda &lt;- 1/3\nmu &lt;- 1/2\nt_f &lt;- 4*60\n\nRV_arr &lt;- function(n=1) {\n  rexp(n, rate = lambda)\n}\n\nRV_service &lt;- function(n=1) {\n  rexp(n, rate = mu)\n}"
  },
  {
    "objectID": "recitations/R5_nb.html#simmer-components",
    "href": "recitations/R5_nb.html#simmer-components",
    "title": "R5 Intro to Simmer 1",
    "section": "4.3 Simmer Components",
    "text": "4.3 Simmer Components\n\nEnvironment: The simulation environment, which contains the resources and processes\nTrajectories: The paths that entities take through the simulation, which define the sequence of events that occur\nResources: The resources that are used in the simulation, such as servers, buses, and waiting areas\n\nLet’s break the problem down into components\n\n4.3.1 Customer Trajectory\n\ncust_traj &lt;- trajectory() |&gt;\n  seize(\"clerk\", 1) |&gt;\n  timeout(function() RV_service(1)) |&gt;\n  release(\"clerk\", 1)\n\n\nVery basic trajectory. Customer shows up, gets in line (if necessary), makes a return, and leaves as shown in @plot-customer-trajectory\n\n\nplot(cust_traj)\n\n\nsome bug I’ll investigate and demonstrate next time how to get the plot to appear correctly.\n\n\n\n4.3.2 More complex trajectory\nMore complex plotted trajectory from the docs\n\n\n4.3.3 Instantiating the Simulation Environment\n\nreturn_line &lt;- simmer() |&gt;\n  add_resource(\"clerk\", 1) |&gt;\n  add_generator(\"customer\", cust_traj, function() RV_arr(1))"
  },
  {
    "objectID": "recitations/R5_nb.html#running-the-simulation",
    "href": "recitations/R5_nb.html#running-the-simulation",
    "title": "R5 Intro to Simmer 1",
    "section": "4.4 Running the Simulation",
    "text": "4.4 Running the Simulation\n\nreturn_line |&gt; run(t_f)\n\nsimmer environment: anonymous | now: 240 | next: 245.148894915674\n{ Monitor: in memory }\n{ Resource: clerk | monitored: TRUE | server status: 0(1) | queue status: 0(Inf) }\n{ Source: customer | monitored: 1 | n_generated: 76 }"
  },
  {
    "objectID": "recitations/R5_nb.html#getting-results",
    "href": "recitations/R5_nb.html#getting-results",
    "title": "R5 Intro to Simmer 1",
    "section": "4.5 Getting Results",
    "text": "4.5 Getting Results\nget_mon_resources: gets information about the “server” usage get_mon_arrivals: gets information about the “customers”\n\n4.5.1 Resource Visualization\n\nresources &lt;- get_mon_resources(return_line)\n\nkable(head(resources))\n\n\naverages over time:\n\n\nplot(resources, metric = \"usage\")\n\n\n\n\nSystem usage over time\n\n\n\n\n\ninstantaneous usage:\n\n\nplot(resources, metric = \"usage\", steps=TRUE)\n\n\n\n\nSystem usage over time\n\n\n\n\n\nutiliazation of the resources. Not super interesting here due to only one resource\n\n\nplot(resources, metric = \"utilization\")\n\n\n\n\nSystem utilization over time\n\n\n\n\n\nlooking at just the queue\n\n\nplot(resources, metric = \"usage\", items=\"queue\", steps=TRUE)\n\n\n\n\nQueue usage over time\n\n\n\n\n\nplot(resources, metric = \"usage\", items=\"server\", steps=TRUE)\n\n\n\n\n\n\n\n\n\n\n4.5.2 Customer Visualization\n\narrivals &lt;- get_mon_arrivals(return_line)\n\nkable(head(arrivals))\n\n\n\n\n\n\n\n\n\n\n\n\nname\nstart_time\nend_time\nactivity_time\nfinished\nreplication\n\n\n\n\ncustomer0\n0.5238033\n1.064985\n0.5411812\nTRUE\n1\n\n\ncustomer1\n0.9219808\n3.123207\n2.0582227\nTRUE\n1\n\n\ncustomer2\n1.7562079\n3.543221\n0.4200142\nTRUE\n1\n\n\ncustomer3\n7.8098146\n8.847429\n1.0376142\nTRUE\n1\n\n\ncustomer4\n12.1858936\n14.162322\n1.9764282\nTRUE\n1\n\n\ncustomer5\n16.1830390\n18.698376\n2.5153372\nTRUE\n1\n\n\n\n\n\n\nplot(arrivals, metric = \"activity_time\")\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nActivity time of customers\n\n\n\n\n\nplot(arrivals, metric = \"waiting_time\")\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nWait time of customers\n\n\n\n\n\nplot(arrivals, metric = \"flow_time\")\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nFlow time of customers"
  },
  {
    "objectID": "recitations/R2_nb.html#start-r-studio",
    "href": "recitations/R2_nb.html#start-r-studio",
    "title": "R2: Airport Baggage Handling System",
    "section": "1.1 Start R Studio",
    "text": "1.1 Start R Studio",
    "crumbs": [
      "Tutorials",
      "Recitation #2"
    ]
  },
  {
    "objectID": "recitations/R2_nb.html#load-necessary-packages",
    "href": "recitations/R2_nb.html#load-necessary-packages",
    "title": "R2: Airport Baggage Handling System",
    "section": "1.2 Load Necessary Packages",
    "text": "1.2 Load Necessary Packages\n\n\nCode\ninstall.packages(\"tidyverse\")\ninstall.packages(\"knitr\")\ninstall.packages(\"fitdistrplus\")\n\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(fitdistrplus)",
    "crumbs": [
      "Tutorials",
      "Recitation #2"
    ]
  },
  {
    "objectID": "recitations/R2_nb.html#download-data",
    "href": "recitations/R2_nb.html#download-data",
    "title": "R2: Airport Baggage Handling System",
    "section": "1.3 Download Data",
    "text": "1.3 Download Data\n\nAirline Arrival data Bureau of Transportation Statistics\nSimulated Baggage data: https://tinyurl.com/sim-bag-data\n\n\n\nCode\n# Options: \n# data &lt;- read_csv(\"path/to/where/you/downloaded/it\")\n# navigate to the file in your file explorer pane. Click on the file and \"import dataset\"\ndata &lt;- read_csv(\"https://tinyurl.com/sim-bag-data\")\nhead(data)\n\n\n# A tibble: 6 × 5\n  `Flight Number` `Tail Number` `Origin Airport` Arrival            \n  &lt;chr&gt;           &lt;chr&gt;         &lt;chr&gt;            &lt;dttm&gt;             \n1 0208            N804UA        ATL              2024-01-23 22:47:00\n2 0208            N804UA        ATL              2024-01-23 22:47:00\n3 0208            N804UA        ATL              2024-01-23 22:47:00\n4 0208            N804UA        ATL              2024-01-23 22:47:00\n5 0208            N804UA        ATL              2024-01-23 22:47:00\n6 0208            N804UA        ATL              2024-01-23 22:47:00\n# ℹ 1 more variable: bag_completion_time &lt;dttm&gt;",
    "crumbs": [
      "Tutorials",
      "Recitation #2"
    ]
  },
  {
    "objectID": "recitations/R2_nb.html#visualize-data",
    "href": "recitations/R2_nb.html#visualize-data",
    "title": "R2: Airport Baggage Handling System",
    "section": "3.1 Visualize Data",
    "text": "3.1 Visualize Data\n\n\nCode\ndata &lt;- data |&gt; mutate(bag_delivery_time = as.numeric(bag_completion_time - Arrival))\n\ndata |&gt; ggplot(aes(x = bag_delivery_time)) + \n  geom_histogram()",
    "crumbs": [
      "Tutorials",
      "Recitation #2"
    ]
  },
  {
    "objectID": "recitations/R2_nb.html#fit-distributions-to-data",
    "href": "recitations/R2_nb.html#fit-distributions-to-data",
    "title": "R2: Airport Baggage Handling System",
    "section": "3.2 Fit Distributions to Data",
    "text": "3.2 Fit Distributions to Data\n\nuse fitdistrplus to fit various distributions\n\n\n\nCode\nf_norm &lt;- fitdist(data$bag_delivery_time, \"norm\")\nf_ln &lt;- fitdist(data$bag_delivery_time, \"lnorm\")\nf_weibull &lt;- fitdist(data$bag_delivery_time, \"weibull\")\nf_gamma &lt;- fitdist(data$bag_delivery_time, \"gamma\")\n\nplot.legend &lt;- c(\"Normal\", \"LogNormal\", \"Weibull\", \"Gamma\")\n\n\n\nuse plotting functionality to plot a comparison of the data.\n\n\n\nCode\ndenscomp(\n  list(f_norm, f_ln, f_weibull, f_gamma),\n  xlab = \"Bag Delivery Time (min)\",\n  legendtext = plot.legend)",
    "crumbs": [
      "Tutorials",
      "Recitation #2"
    ]
  },
  {
    "objectID": "recitations/R2_nb.html#compare-to-manual-apporach",
    "href": "recitations/R2_nb.html#compare-to-manual-apporach",
    "title": "R2: Airport Baggage Handling System",
    "section": "3.3 Compare to Manual Apporach",
    "text": "3.3 Compare to Manual Apporach\n\nAlternatively, can generate probabilities for each bag arrival time by applying the fitted distributions to the data\n\n\n\nCode\ndata &lt;- data |&gt; mutate(\n  Weibull = dweibull(bag_delivery_time,\n                      shape = f_weibull$estimate[\"shape\"],\n                      scale = f_weibull$estimate[\"scale\"]),\n  Normal = dnorm(bag_delivery_time,\n                      mean = f_norm$estimate[\"mean\"],\n                      sd = f_norm$estimate[\"sd\"]),\n  Gamma = dgamma(bag_delivery_time,\n                      shape = f_gamma$estimate[\"shape\"],\n                      rate = f_gamma$estimate[\"rate\"]),\n  LogNormal = dlnorm(bag_delivery_time,\n                      meanlog = f_ln$estimate[\"meanlog\"],\n                      sdlog = f_ln$estimate[\"sdlog\"]),\n)\n\n\n\nThen can plot these direclty one at a time\n\n\n\nCode\ndata |&gt; ggplot(aes(x = bag_delivery_time)) +\n  geom_line(aes(y = Gamma, color=\"Gamma\", line=\"grey\")) +\n  geom_line(aes(y = Normal, color=\"Normal\")) +\n  geom_line(aes(y = LogNormal, color=\"LogNormal\")) +\n  labs(\n    color = \"Distribution\",\n    x = \"Bag Delivery Time (min)\",\n    y = \"Probability Density\"\n  )\n\n\n\n\n\n\n\n\n\n\nAlternatively, we could transform our tidy data from “wide” to “long” form\n\n\n\nCode\nlong_data &lt;- data |&gt; pivot_longer(\n  cols = c(Gamma, LogNormal, Normal, Weibull),\n  names_to = \"Distribution\",\n  values_to = \"Probability\")\n\n\n\nUsing kable to output a formatted table.\n\n\n\nCode\nkable(head(long_data))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlight Number\nTail Number\nOrigin Airport\nArrival\nbag_completion_time\nbag_delivery_time\nDistribution\nProbability\n\n\n\n\n0208\nN804UA\nATL\n2024-01-23 17:47:00\n2024-01-23 18:12:48\n25.80000\nGamma\n0.0632560\n\n\n0208\nN804UA\nATL\n2024-01-23 17:47:00\n2024-01-23 18:12:48\n25.80000\nLogNormal\n0.0666378\n\n\n0208\nN804UA\nATL\n2024-01-23 17:47:00\n2024-01-23 18:12:48\n25.80000\nNormal\n0.0566180\n\n\n0208\nN804UA\nATL\n2024-01-23 17:47:00\n2024-01-23 18:12:48\n25.80000\nWeibull\n0.0480593\n\n\n0208\nN804UA\nATL\n2024-01-23 17:47:00\n2024-01-23 18:19:04\n32.06667\nGamma\n0.0687913\n\n\n0208\nN804UA\nATL\n2024-01-23 17:47:00\n2024-01-23 18:19:04\n32.06667\nLogNormal\n0.0661965\n\n\n\n\n\n\nand we can actually plot this much easier\n\n\n\nCode\nggplot() +\n  # Histogram or density plot of `bag_delivery_time`\n  geom_histogram(data = data, aes(x = bag_delivery_time, y = ..density..), \n                 bins = 30, color=\"black\", fill = \"skyblue\", alpha = 0.5) +\n  # Overlay probability density lines from `long_data`\n  geom_line(data = long_data, aes(x = bag_delivery_time, y = Probability, color = Distribution), size=1)\n\n\n\n\n\n\n\n\n\n\nFor relativley simple scenarios, it may be easier to manually plot the data yourself\nAs data and plots become more sophisticated this can be difficult\nI recommend getting familiar with “long” and “wide” data and how to go between the two.",
    "crumbs": [
      "Tutorials",
      "Recitation #2"
    ]
  },
  {
    "objectID": "recitations/R2_nb.html#conclusion",
    "href": "recitations/R2_nb.html#conclusion",
    "title": "R2: Airport Baggage Handling System",
    "section": "3.4 Conclusion",
    "text": "3.4 Conclusion\n\nWhich distribution is the best fit?\nHow do you know?\nDoes the schematic design meet specifications?\n\n\n\nCode\n#| echo: true\n\nfitted_distributins &lt;- list(f_gamma, f_ln, f_norm, f_weibull)\n\n# Extract summary metrics from the fitted distributions\nsummary_table &lt;- sapply(fitted_distributins, function(fit) {\n  c(\n    \"Number of Parameters\" = as.integer(length(fit$estimate)),  # Number of parameters\n    \"Log-Likelihood\" = fit$loglik,                # Log-likelihood\n    \"AIC\" = fit$aic,                              # Akaike Information Criterion\n    \"BIC\" = fit$bic                               # Bayesian Information Criterion\n  )\n})\n\n# Convert to a data frame for readability\n# summary_table &lt;- as.data.frame(summary_table)\n\n# Assign column names based on your distributions\ncolnames(summary_table) &lt;- c(\"Gamma\", \"Log-Normal\", \"Normal\", \"Weibull\")  # Adjust based on distribution names\n\n# View the table\nkable(summary_table)\n\n\n\n\n\n\nGamma\nLog-Normal\nNormal\nWeibull\n\n\n\n\nNumber of Parameters\n2.00\n2.00\n2.00\n2.0\n\n\nLog-Likelihood\n-58690.38\n-58732.54\n-58877.11\n-59819.8\n\n\nAIC\n117384.75\n117469.09\n117758.23\n119643.6\n\n\nBIC\n117400.51\n117484.84\n117773.98\n119659.3",
    "crumbs": [
      "Tutorials",
      "Recitation #2"
    ]
  },
  {
    "objectID": "recitations/R0_nb.html#me",
    "href": "recitations/R0_nb.html#me",
    "title": "R0: Introductions",
    "section": "Me",
    "text": "Me\n\nDaniel Moore\n2nd Year PhD Student in ISE\nStudy with Dr. Mieth and part of the ROPeS Lab\n\n\n\n\n\n\ngantt\n    title Career Progression Timeline\n    dateFormat YYYY-MM-DD\n    section Professional\n    Engineer Officer (US Army) : p1, 2010-05-22, 2018-09-30\n    Protective Design Consultant (Arup) : p2, 2020-12-30, 2023-08-03\n\n    section Academic\n    BS in Civil Eng. (USMA) : a1, 2006-06-06, 2010-05-22\n    MS Eng. Mngt. (MS&T): a2, 2015-01-01, 2015-09-01\n    MITA (RBS-Newark) : a3, 2018-09-01, 2019-12-31\n    Ph.D in ISE (Rutgers) : a4, 2023-09-01, 2025-01-22\n\n    section Technical Skills\n    Excel: milestone, t0, 2009-09-01, 0d\n    MathCAD: milestone, t1, 2010-05-22, 0d\n    AMPL : milestone, t1, 2015-06-01, 0d\n    Git, Python, JavaScript : milestone, t1, 2019-01-01, 0d\n    LS-DYNA, Julia, Flux : milestone, t3, 2020-01-01, 0d\n    PowerBI : milestone, t4, 2021-01-01, 0d\n    ArcGIS : milestone, t5, 2022-01-01, 0d\n    R: milestone, t6, 2024-01-30, 0d"
  },
  {
    "objectID": "recitations/R0_nb.html#my-simulations-experience",
    "href": "recitations/R0_nb.html#my-simulations-experience",
    "title": "R0: Introductions",
    "section": "My Simulations Experience",
    "text": "My Simulations Experience\n\nArmy: Tabletop Excercises. Higher echelons use advanced wargaming ( MORS)\nBlast Engineer: Structural Blast Resistance\nEngineer Consultant: Pedestrian Movement\nPhD Research: Distributed Energy Resource Power Flexibility"
  },
  {
    "objectID": "recitations/R0_nb.html#you",
    "href": "recitations/R0_nb.html#you",
    "title": "R0: Introductions",
    "section": "You",
    "text": "You\n\nYour name\nWhat drew you to ISE (or this course if you’re not ISE)\nAnything in particular you want to see in the recitation (applications, content, etc.)"
  },
  {
    "objectID": "recitations/R0_nb.html#typical-recitation-plan",
    "href": "recitations/R0_nb.html#typical-recitation-plan",
    "title": "R0: Introductions",
    "section": "Typical Recitation Plan",
    "text": "Typical Recitation Plan\nWe get 1:20 together each week\n\n5 min Recap & Questions\n15 min demo\n45 min collaborative lab\n15 min open time to work"
  },
  {
    "objectID": "recitations/R0_nb.html#additional-assistanceoffice-hourshelp",
    "href": "recitations/R0_nb.html#additional-assistanceoffice-hourshelp",
    "title": "R0: Introductions",
    "section": "Additional Assistance/Office Hours/Help",
    "text": "Additional Assistance/Office Hours/Help\n\nSend me a message on Canvas anytime, I will respond within 1 business day\nOffice hours (just stop by, no appointment needed):\n\nWednesdays: 4:00 PM - 5:30 PM\nWeeks Hall 222 (Zoom if necessary, send me a message on Canvas)\n\nOr by appointment (send me a message on Canvas)"
  },
  {
    "objectID": "recitations/R0_nb.html#recitation-objectives",
    "href": "recitations/R0_nb.html#recitation-objectives",
    "title": "R0: Introductions",
    "section": "Recitation Objectives",
    "text": "Recitation Objectives\n\nYou can simulate complex systems and communicate findings effectively\nYou are competent in an open-source, general-purpose programming language\nYou can produce high-quality technical reports"
  },
  {
    "objectID": "recitations/R0_nb.html#this-is-your-recitation",
    "href": "recitations/R0_nb.html#this-is-your-recitation",
    "title": "R0: Introductions",
    "section": "This is YOUR Recitation",
    "text": "This is YOUR Recitation\n\nGive me feedback if you all need/want something else\nCome prepared ready to engage with the material\nDo not be distracting or take away from your peers’ experience"
  },
  {
    "objectID": "recitations/R4_reveal.html#simulation-concepts",
    "href": "recitations/R4_reveal.html#simulation-concepts",
    "title": "R4 Azimuth Check",
    "section": "2.1 Simulation Concepts",
    "text": "2.1 Simulation Concepts"
  },
  {
    "objectID": "recitations/R4_reveal.html#quarto",
    "href": "recitations/R4_reveal.html#quarto",
    "title": "R4 Azimuth Check",
    "section": "2.2 Quarto",
    "text": "2.2 Quarto\n\nWhy are we using Quarto?\nWhat does Quarto give you?\nHow do you use R and Quarto?"
  },
  {
    "objectID": "recitations/R4_reveal.html#implementation-in-r",
    "href": "recitations/R4_reveal.html#implementation-in-r",
    "title": "R4 Azimuth Check",
    "section": "2.3 Implementation in R",
    "text": "2.3 Implementation in R\n\nReading and manipulating data\nTidy data vs. Matrix data. Wide-form tidy vs. Long-form tidy\nCreating Plots\nSampling distributions\nFunctions, Loops, control flow, variables\nFitting distributions\nAnimations"
  },
  {
    "objectID": "recitations/R4_reveal.html#timeline",
    "href": "recitations/R4_reveal.html#timeline",
    "title": "R4 Azimuth Check",
    "section": "3.1 Timeline",
    "text": "3.1 Timeline\n\n\n\n\n\ngantt\n    title Project Timeline - Simulation Course\n    dateFormat  YYYY-MM-DD\n    section Milestones\n    Assigned : milestone, 2025-02-04, 1d\n    Project Proposal : milestone, 2025-02-18, 1d\n    Spring Break : springbreak, 2025-03-15, 9d\n    Report Date : milestone, 2025-03-25, 1d\n    Presentation: milestone, 2025-03-25, 1d\n\n    section Tasks\n    System Modeling : sys_model, 2025-02-04, 2w\n    Analytical Modeling : anlytical_model, 2025-02-10, 3w\n    Modeling in R :  numerical_model, 2025-02-10, 3w\n    Report : 2025-02-28, 2w\n    Presentation : 2025-02-28, 2w\n    Final Submission : 2025-03-25, 1d\n    \n    section Recitations\n    Intro to `simmer` 1: 2025-02-19, 2d\n    Custom Distributions : 2025-02-26, 2d\n    Intro to `simmer` 2: 2025-03-05, 2d\n    Reporting Results* : 2025-03-12, 2d\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nWill be recorded and posted to Canvas"
  },
  {
    "objectID": "recitations/R4_reveal.html#process-flow-and-modeling",
    "href": "recitations/R4_reveal.html#process-flow-and-modeling",
    "title": "R4 Azimuth Check",
    "section": "3.2 Process Flow and Modeling",
    "text": "3.2 Process Flow and Modeling\n\n\n\n\n\ngantt\n    title Restaurant Order Tracking\n    dateFormat  X\n    axisFormat %M min\n    Start : milestone, 0, 0s\n    Food Prep (10-20 min) :prep, 0, 15m  \n    Food Delivery (20-30 min) :delivery, after prep, 30m  \n    Delivered : milestone, after delivery, 0s"
  },
  {
    "objectID": "recitations/R4_reveal.html#insights",
    "href": "recitations/R4_reveal.html#insights",
    "title": "R4 Azimuth Check",
    "section": "3.3 Insights",
    "text": "3.3 Insights\n\nThoughts\nQuestions\nConcerns\nClarifications"
  },
  {
    "objectID": "recitations/R4_nb.html",
    "href": "recitations/R4_nb.html",
    "title": "R4 Azimuth Check",
    "section": "",
    "text": "Homework?\nProject?\nR?\nQuarto?",
    "crumbs": [
      "Tutorials",
      "Recitation #4"
    ]
  },
  {
    "objectID": "recitations/R4_nb.html#simulation-concepts",
    "href": "recitations/R4_nb.html#simulation-concepts",
    "title": "R4 Azimuth Check",
    "section": "2.1 Simulation Concepts",
    "text": "2.1 Simulation Concepts\n\n2.1.1 Distributions\n\nWhere do distributions come from?\nWhat information can we get from them?\nIf we have a distribution, how do we simulate data with it?\nIf we have data, how do we figure out which distribution it came from?\nWhat is the relationship between a system process and a distribution?\n\n\n\n2.1.2 Simulations\n\nWhy do we do simulations?\nWhat is the most important step in a simulation?\nHow do we do one?",
    "crumbs": [
      "Tutorials",
      "Recitation #4"
    ]
  },
  {
    "objectID": "recitations/R4_nb.html#quarto",
    "href": "recitations/R4_nb.html#quarto",
    "title": "R4 Azimuth Check",
    "section": "2.2 Quarto",
    "text": "2.2 Quarto\n\nWhy are we using Quarto?\nWhat does Quarto give you?\nHow do you use R and Quarto?",
    "crumbs": [
      "Tutorials",
      "Recitation #4"
    ]
  },
  {
    "objectID": "recitations/R4_nb.html#implementation-in-r",
    "href": "recitations/R4_nb.html#implementation-in-r",
    "title": "R4 Azimuth Check",
    "section": "2.3 Implementation in R",
    "text": "2.3 Implementation in R\n\nReading and manipulating data\nTidy data vs. Matrix data. Wide-form tidy vs. Long-form tidy\nCreating Plots\nSampling distributions\nFunctions, Loops, control flow, variables\nFitting distributions\nAnimations",
    "crumbs": [
      "Tutorials",
      "Recitation #4"
    ]
  },
  {
    "objectID": "recitations/R4_nb.html#timeline",
    "href": "recitations/R4_nb.html#timeline",
    "title": "R4 Azimuth Check",
    "section": "3.1 Timeline",
    "text": "3.1 Timeline\n\n\n\n\n\ngantt\n    title Project Timeline - Simulation Course\n    dateFormat  YYYY-MM-DD\n    section Milestones\n    Assigned : milestone, 2025-02-04, 1d\n    Project Proposal : milestone, 2025-02-18, 1d\n    Spring Break : springbreak, 2025-03-15, 9d\n    Report Date : milestone, 2025-03-25, 1d\n    Presentation: milestone, 2025-03-25, 1d\n\n    section Tasks\n    System Modeling : sys_model, 2025-02-04, 2w\n    Analytical Modeling : anlytical_model, 2025-02-10, 3w\n    Modeling in R :  numerical_model, 2025-02-10, 3w\n    Report : 2025-02-28, 2w\n    Presentation : 2025-02-28, 2w\n    Final Submission : 2025-03-25, 1d\n    \n    section Recitations\n    Intro to `simmer` 1: 2025-02-19, 2d\n    Custom Distributions : 2025-02-26, 2d\n    Intro to `simmer` 2: 2025-03-05, 2d\n    Reporting Results* : 2025-03-12, 2d\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nWill be recorded and posted to Canvas",
    "crumbs": [
      "Tutorials",
      "Recitation #4"
    ]
  },
  {
    "objectID": "recitations/R4_nb.html#process-flow-and-modeling",
    "href": "recitations/R4_nb.html#process-flow-and-modeling",
    "title": "R4 Azimuth Check",
    "section": "3.2 Process Flow and Modeling",
    "text": "3.2 Process Flow and Modeling\n\n\n\n\n\ngantt\n    title Restaurant Order Tracking\n    dateFormat  X\n    axisFormat %M min\n    Start : milestone, 0, 0s\n    Food Prep (10-20 min) :prep, 0, 15m  \n    Food Delivery (20-30 min) :delivery, after prep, 30m  \n    Delivered : milestone, after delivery, 0s",
    "crumbs": [
      "Tutorials",
      "Recitation #4"
    ]
  },
  {
    "objectID": "recitations/R4_nb.html#insights",
    "href": "recitations/R4_nb.html#insights",
    "title": "R4 Azimuth Check",
    "section": "3.3 Insights",
    "text": "3.3 Insights\n\nThoughts\nQuestions\nConcerns\nClarifications",
    "crumbs": [
      "Tutorials",
      "Recitation #4"
    ]
  }
]